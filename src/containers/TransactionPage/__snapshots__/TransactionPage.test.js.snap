// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TransactionPage - Order matches snapshot 1`] = `
<Page
  scrollingDisabled={false}
  title="TransactionPage.title"
>
  <LayoutSingleColumn
    className={null}
    rootClassName={null}
  >
    <LayoutWrapperTopbar
      className={null}
      rootClassName={null}
    >
      <withRouter(Connect(TopbarContainerComponent)) />
    </LayoutWrapperTopbar>
    <LayoutWrapperMain
      className={null}
      rootClassName={null}
    >
      <div
        className="root"
      >
        <injectIntl(TransactionPanelComponent)
          className="tabContent tabContentVisible"
          currentUser={
            Object {
              "attributes": Object {
                "banned": false,
                "deleted": false,
                "email": "customer1@example.com",
                "emailVerified": true,
                "profile": Object {
                  "abbreviatedName": "customer1 abbreviated name",
                  "displayName": "customer1 display name",
                  "firstName": "customer1 first name",
                  "lastName": "customer1 last name",
                },
              },
              "id": UUID {
                "_sdkType": "UUID",
                "uuid": "customer1",
              },
              "type": "currentUser",
            }
          }
          fetchLineItemsError={null}
          fetchLineItemsInProgress={false}
          fetchMessagesError={null}
          fetchMessagesInProgress={false}
          fetchTimeSlotsError={null}
          initialMessageFailed={false}
          leaveReviewProps={
            Object {
              "buttonText": "TransactionPage.leaveReview.actionButton",
              "error": undefined,
              "errorText": "TransactionPage.leaveReview.actionError",
              "inProgress": undefined,
              "onTransition": [Function],
            }
          }
          lineItems={null}
          markDeliveredProps={
            Object {
              "buttonText": "TransactionPage.markDelivered.actionButton",
              "error": null,
              "errorText": "TransactionPage.markDelivered.actionError",
              "inProgress": false,
              "onTransition": [Function],
            }
          }
          markReceivedFromPurchasedProps={
            Object {
              "buttonText": "TransactionPage.markReceivedFromPurchased.actionButton",
              "error": null,
              "errorText": "TransactionPage.markReceivedFromPurchased.actionError",
              "inProgress": false,
              "onTransition": [Function],
            }
          }
          markReceivedProps={
            Object {
              "buttonText": "TransactionPage.markReceived.actionButton",
              "error": null,
              "errorText": "TransactionPage.markReceived.actionError",
              "inProgress": false,
              "onTransition": [Function],
            }
          }
          messages={Array []}
          oldestMessagePageFetched={0}
          onFetchTransactionLineItems={[Function]}
          onOpenDisputeModal={[Function]}
          onOpenReviewModal={[Function]}
          onSendMessage={[Function]}
          onShowMoreMessages={[Function]}
          onSubmitOrderRequest={[Function]}
          savePaymentMethodFailed={false}
          sendMessageError={null}
          sendMessageInProgress={false}
          timeSlots={null}
          totalMessagePages={0}
          transaction={
            Object {
              "attributes": Object {
                "createdAt": 2017-05-01T00:00:00.000Z,
                "lastTransition": "transition/confirm-payment",
                "lastTransitionedAt": 2017-06-01T00:00:00.000Z,
                "lineItems": Array [
                  Object {
                    "code": "line-item/day",
                    "includeFor": Array [
                      "customer",
                      "provider",
                    ],
                    "lineTotal": Money {
                      "_sdkType": "Money",
                      "amount": 1000,
                      "currency": "USD",
                    },
                    "quantity": "1",
                    "reversal": false,
                    "unitPrice": Money {
                      "_sdkType": "Money",
                      "amount": 1000,
                      "currency": "USD",
                    },
                  },
                  Object {
                    "code": "line-item/provider-commission",
                    "includeFor": Array [
                      "provider",
                    ],
                    "lineTotal": Money {
                      "_sdkType": "Money",
                      "amount": -100,
                      "currency": "USD",
                    },
                    "reversal": false,
                    "unitPrice": Money {
                      "_sdkType": "Money",
                      "amount": -100,
                      "currency": "USD",
                    },
                  },
                ],
                "payinTotal": Money {
                  "_sdkType": "Money",
                  "amount": 1000,
                  "currency": "USD",
                },
                "payoutTotal": Money {
                  "_sdkType": "Money",
                  "amount": 900,
                  "currency": "USD",
                },
                "transitions": Array [
                  Object {
                    "by": "customer",
                    "createdAt": 2017-05-01T00:00:00.000Z,
                    "transition": "transition/request-payment",
                  },
                  Object {
                    "by": "customer",
                    "createdAt": 2017-05-01T00:00:01.000Z,
                    "transition": "transition/confirm-payment",
                  },
                ],
              },
              "booking": null,
              "customer": Object {
                "attributes": Object {
                  "banned": false,
                  "deleted": false,
                  "profile": Object {
                    "abbreviatedName": "TT",
                    "displayName": "customer1 display name",
                  },
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "customer1",
                },
                "type": "user",
              },
              "id": UUID {
                "_sdkType": "UUID",
                "uuid": "tx-order-1",
              },
              "listing": Object {
                "attributes": Object {
                  "deleted": false,
                  "description": "listing1 description",
                  "geolocation": LatLng {
                    "_sdkType": "LatLng",
                    "lat": 40,
                    "lng": 60,
                  },
                  "price": Money {
                    "_sdkType": "Money",
                    "amount": 5500,
                    "currency": "USD",
                  },
                  "publicData": Object {},
                  "state": "published",
                  "title": "listing1 title",
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "listing1",
                },
                "type": "listing",
              },
              "provider": Object {
                "attributes": Object {
                  "banned": false,
                  "deleted": false,
                  "profile": Object {
                    "abbreviatedName": "TT",
                    "displayName": "provider1 display name",
                  },
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "provider1",
                },
                "type": "user",
              },
              "reviews": Array [],
              "type": "transaction",
            }
          }
          transactionRole="customer"
        />
      </div>
      <injectIntl(ReviewModal)
        id="ReviewOrderModal"
        isOpen={false}
        onCloseModal={[Function]}
        onSubmitReview={[Function]}
        reviewSent={false}
        revieweeName={
          <UserDisplayName
            bannedUserDisplayName={null}
            className={null}
            deletedUserDisplayName={null}
            intl={
              Object {
                "formatDate": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelativeTime": [Function],
                "formatTime": [Function],
                "now": [Function],
              }
            }
            rootClassName={null}
            user={
              Object {
                "attributes": Object {
                  "banned": false,
                  "deleted": false,
                  "profile": Object {
                    "abbreviatedName": "TT",
                    "displayName": "provider1 display name",
                  },
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "provider1",
                },
                "type": "user",
              }
            }
          />
        }
      />
      <injectIntl(DisputeModal)
        disputeError={null}
        disputeInProgress={false}
        disputeSubmitted={false}
        id="DisputeOrderModal"
        isOpen={false}
        onCloseModal={[Function]}
        onDisputeOrder={[Function]}
      />
    </LayoutWrapperMain>
    <LayoutWrapperFooter
      className="footer"
      rootClassName={null}
    >
      <injectIntl(Footer) />
    </LayoutWrapperFooter>
  </LayoutSingleColumn>
</Page>
`;

exports[`TransactionPage - Sale matches snapshot 1`] = `
<Page
  scrollingDisabled={false}
  title="TransactionPage.title"
>
  <LayoutSingleColumn
    className={null}
    rootClassName={null}
  >
    <LayoutWrapperTopbar
      className={null}
      rootClassName={null}
    >
      <withRouter(Connect(TopbarContainerComponent)) />
    </LayoutWrapperTopbar>
    <LayoutWrapperMain
      className={null}
      rootClassName={null}
    >
      <div
        className="root"
      >
        <injectIntl(TransactionPanelComponent)
          className="tabContent tabContentVisible"
          currentUser={
            Object {
              "attributes": Object {
                "banned": false,
                "deleted": false,
                "email": "provider1@example.com",
                "emailVerified": true,
                "profile": Object {
                  "abbreviatedName": "provider1 abbreviated name",
                  "displayName": "provider1 display name",
                  "firstName": "provider1 first name",
                  "lastName": "provider1 last name",
                },
              },
              "id": UUID {
                "_sdkType": "UUID",
                "uuid": "provider1",
              },
              "type": "currentUser",
            }
          }
          fetchLineItemsError={null}
          fetchLineItemsInProgress={false}
          fetchMessagesError={null}
          fetchTimeSlotsError={null}
          initialMessageFailed={false}
          leaveReviewProps={
            Object {
              "buttonText": "TransactionPage.leaveReview.actionButton",
              "error": undefined,
              "errorText": "TransactionPage.leaveReview.actionError",
              "inProgress": undefined,
              "onTransition": [Function],
            }
          }
          lineItems={null}
          markDeliveredProps={
            Object {
              "buttonText": "TransactionPage.markDelivered.actionButton",
              "error": null,
              "errorText": "TransactionPage.markDelivered.actionError",
              "inProgress": false,
              "onTransition": [Function],
            }
          }
          markReceivedFromPurchasedProps={
            Object {
              "buttonText": "TransactionPage.markReceivedFromPurchased.actionButton",
              "error": null,
              "errorText": "TransactionPage.markReceivedFromPurchased.actionError",
              "inProgress": false,
              "onTransition": [Function],
            }
          }
          markReceivedProps={
            Object {
              "buttonText": "TransactionPage.markReceived.actionButton",
              "error": null,
              "errorText": "TransactionPage.markReceived.actionError",
              "inProgress": false,
              "onTransition": [Function],
            }
          }
          messages={Array []}
          oldestMessagePageFetched={0}
          onFetchTransactionLineItems={[Function]}
          onOpenDisputeModal={[Function]}
          onOpenReviewModal={[Function]}
          onSendMessage={[Function]}
          onShowMoreMessages={[Function]}
          onSubmitOrderRequest={[Function]}
          savePaymentMethodFailed={false}
          sendMessageError={null}
          sendMessageInProgress={false}
          timeSlots={null}
          totalMessagePages={0}
          transaction={
            Object {
              "attributes": Object {
                "createdAt": 2017-05-01T00:00:00.000Z,
                "lastTransition": "transition/confirm-payment",
                "lastTransitionedAt": 2017-06-01T00:00:00.000Z,
                "lineItems": Array [
                  Object {
                    "code": "line-item/day",
                    "includeFor": Array [
                      "customer",
                      "provider",
                    ],
                    "lineTotal": Money {
                      "_sdkType": "Money",
                      "amount": 1000,
                      "currency": "USD",
                    },
                    "quantity": "1",
                    "reversal": false,
                    "unitPrice": Money {
                      "_sdkType": "Money",
                      "amount": 1000,
                      "currency": "USD",
                    },
                  },
                  Object {
                    "code": "line-item/provider-commission",
                    "includeFor": Array [
                      "provider",
                    ],
                    "lineTotal": Money {
                      "_sdkType": "Money",
                      "amount": -100,
                      "currency": "USD",
                    },
                    "reversal": false,
                    "unitPrice": Money {
                      "_sdkType": "Money",
                      "amount": -100,
                      "currency": "USD",
                    },
                  },
                ],
                "payinTotal": Money {
                  "_sdkType": "Money",
                  "amount": 1000,
                  "currency": "USD",
                },
                "payoutTotal": Money {
                  "_sdkType": "Money",
                  "amount": 900,
                  "currency": "USD",
                },
                "transitions": Array [
                  Object {
                    "by": "customer",
                    "createdAt": 2017-05-01T00:00:00.000Z,
                    "transition": "transition/request-payment",
                  },
                  Object {
                    "by": "customer",
                    "createdAt": 2017-05-01T00:00:01.000Z,
                    "transition": "transition/confirm-payment",
                  },
                ],
              },
              "booking": null,
              "customer": Object {
                "attributes": Object {
                  "banned": false,
                  "deleted": false,
                  "profile": Object {
                    "abbreviatedName": "TT",
                    "displayName": "customer1 display name",
                  },
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "customer1",
                },
                "type": "user",
              },
              "id": UUID {
                "_sdkType": "UUID",
                "uuid": "tx-sale-1",
              },
              "listing": Object {
                "attributes": Object {
                  "deleted": false,
                  "description": "listing1 description",
                  "geolocation": LatLng {
                    "_sdkType": "LatLng",
                    "lat": 40,
                    "lng": 60,
                  },
                  "price": Money {
                    "_sdkType": "Money",
                    "amount": 5500,
                    "currency": "USD",
                  },
                  "publicData": Object {},
                  "state": "published",
                  "title": "listing1 title",
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "listing1",
                },
                "type": "listing",
              },
              "provider": Object {
                "attributes": Object {
                  "banned": false,
                  "deleted": false,
                  "profile": Object {
                    "abbreviatedName": "TT",
                    "displayName": "provider1 display name",
                  },
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "provider1",
                },
                "type": "user",
              },
              "reviews": Array [],
              "type": "transaction",
            }
          }
          transactionRole="provider"
        />
      </div>
      <injectIntl(ReviewModal)
        id="ReviewOrderModal"
        isOpen={false}
        onCloseModal={[Function]}
        onSubmitReview={[Function]}
        reviewSent={false}
        revieweeName={
          <UserDisplayName
            bannedUserDisplayName={null}
            className={null}
            deletedUserDisplayName={null}
            intl={
              Object {
                "formatDate": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelativeTime": [Function],
                "formatTime": [Function],
                "now": [Function],
              }
            }
            rootClassName={null}
            user={
              Object {
                "attributes": Object {
                  "banned": false,
                  "deleted": false,
                  "profile": Object {
                    "abbreviatedName": "TT",
                    "displayName": "customer1 display name",
                  },
                },
                "id": UUID {
                  "_sdkType": "UUID",
                  "uuid": "customer1",
                },
                "type": "user",
              }
            }
          />
        }
      />
      <injectIntl(DisputeModal)
        disputeError={null}
        disputeInProgress={false}
        disputeSubmitted={false}
        id="DisputeOrderModal"
        isOpen={false}
        onCloseModal={[Function]}
        onDisputeOrder={[Function]}
      />
    </LayoutWrapperMain>
    <LayoutWrapperFooter
      className="footer"
      rootClassName={null}
    >
      <injectIntl(Footer) />
    </LayoutWrapperFooter>
  </LayoutSingleColumn>
</Page>
`;
